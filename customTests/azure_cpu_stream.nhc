#!/bin/bash

# Run Stream

EXE_DIR=$AZ_NHC_ROOT/bin

function get_core_conf(){
    # only supports HBv4/HX
    local max_cores=$(nproc)

    if [[ $max_cores != 176 ]]; then
        local increment=$((max_cores / 24))
        local sequence=""

        for ((i = 0; i < max_cores; i += increment)); do
            sequence+="{$i:1},"
        done

        # Remove the trailing comma
        sequence=${sequence%,}

        echo "$sequence"
    else
        echo '{0:1},{4:1},{8:1},{12:1},{16:1},{20:1},{24:1},{28:1},{32:1},{36:1},{38:1},{42:1},{44:1},{48:1},{52:1},{56:1},{60:1},{64:1},{68:1},{72:1},{76:1},{80:1},{82:1},{86:1},{88:1},{92:1},{96:1},{100:1},{104:1},{108:1},{112:1},{116:1},{120:1},{124:1},{126:1},{130:1},{132:1},{136:1},{140:1},{144:1},{148:1},{152:1},{156:1},{160:1},{164:1},{168:1},{170:1},{174:1}'
    fi
}

function install_check(){
    HB_HX_SKUS="standard_hb176rs_v4|standard_hb176-144rs_v4|standard_hb176-96rs_v4|standard_hb176-48rs_v4|standard_hb176-24rs_v4|standard_hx176rs|standard_hx176-144rs|standard_hx176-96rs|standard_hx176-48rs|standard_hx176-24rs"
    SKU=$( curl -H Metadata:true --max-time 10 -s "http://169.254.169.254/metadata/instance/compute/vmSize?api-version=2021-01-01&format=text")
    SKU=$(echo "$SKU" | tr '[:upper:]' '[:lower:]')
    if [[ "$HB_HX_SKUS" =~ "$SKU"  ]]; then
        stream=stream4.exe
    elif [[ "$SKU" == *"hb120"*"_v3"* ]]; then
        stream=stream3.exe
    elif [[ "$SKU" == *"hb120rs_v2"* ]]; then
        stream=stream2.exe
    else
        #default to zen3 build
        stream=stream3.exe
    fi
    # Check that stream is installed
    if [[ ! -f $EXE_DIR/$stream ]]; then
        return 1
    fi
    echo $stream
    return 0
}

function check_cpu_stream(){

    EXP_PERF=$1
	#set expected BW set to default value if argument empty
	if [[ -z "$EXP_PERF" ]]; then
		EXP_PERF=580000
	fi

	# location of executables, must match setup location
	if [[  ! -d "$EXE_DIR" ]]; then
		die 1 -e "check_cpu_stream: Failed to find the executable directory $EXE_DIR."
        return 0
	fi

    stream_exe=$(install_check)
    if [ $? -ne 0 ]; then
        die 1 -e "check_cpu_stream: Failed to run because stream executable was not built"
        return 0
    fi

    # check SKU type
    HB_HX_SKUS="standard_hb176rs_v4|standard_hb176-144rs_v4|standard_hb176-96rs_v4|standard_hb176-48rs_v4|standard_hb176-24rs_v4|standard_hx176rs|standard_hx176-144rs|standard_hx176-96rs|standard_hx176-48rs|standard_hx176-24rs"
    SKU=$( curl -H Metadata:true --max-time 10 -s "http://169.254.169.254/metadata/instance/compute/vmSize?api-version=2021-01-01&format=text")
    SKU=$(echo "$SKU" | tr '[:upper:]' '[:lower:]')
    
	if [[ "$HB_HX_SKUS" =~ "$SKU"  ]]; then
        core_conf=$(get_core_conf)
        if [[ "standard_hb176rs_v4|standard_hx176rs" =~ "$SKU" ]]; then 
            NUM_THREADS=48
        else
            NUM_THREADS=24
        fi    
        stream=$(OMP_SCHEDULE=static  OMP_DYNAMIC=false  OMP_MAX_ACTIVE_LEVELS=1  OMP_STACKSIZE=256M OMP_PROC_BIND=true  OMP_NUM_THREADS=$NUM_THREADS OMP_PLACES=$core_conf \
            $EXE_DIR/$stream_exe |grep -A 4 'Copy:' )
    elif echo $SKU | grep "hb120rs_v3"; then
        stream=$(OMP_SCHEDULE=static  OMP_DYNAMIC=false  OMP_MAX_ACTIVE_LEVELS=1  OMP_STACKSIZE=256M OMP_PROC_BIND=true  OMP_NUM_THREADS=32 \
            OMP_PLACES='{0:1},{3:1},{8:1},{12:1},{16:1},{20:1},{24:1},{28:1},{30:1},{34:1},{38:1},{42:1},{46:1},{50:1},{54:1},{58:1},{60:1},{64:1},{68:1},{72:1},{76:1},{80:1},{84:1},{88:1},{90:1},{94:1},{98:1},{102:1},{106:1},{110:1},{114:1},{118:1}' \
            $EXE_DIR/$stream_exe |grep -A 4 'Copy:' )
    elif echo $SKU | grep "hb120-96rs_v3"; then
        stream=$(OMP_SCHEDULE=static  OMP_DYNAMIC=false  OMP_MAX_ACTIVE_LEVELS=1  OMP_STACKSIZE=256M OMP_PROC_BIND=true  OMP_NUM_THREADS=32 \
            OMP_PLACES='{0:1},{3:1},{6:1},{9:1},{12:1},{15:1},{18:1},{21:1},{24:1},{27:1},{30:1},{33:1},{36:1},{39:1},{42:1},{45:1},{48:1},{51:1},{54:1},{57:1},{60:1},{63:1},{66:1},{69:1},{72:1},{75:1},{78:1},{81:1},{84:1},{87:1},{90:1},{93:1}' \
            $EXE_DIR/$stream_exe |grep -A 4 'Copy:' )
    elif echo $SKU | grep "hb120-64rs_v3"; then
        stream=$(OMP_SCHEDULE=static  OMP_DYNAMIC=false  OMP_MAX_ACTIVE_LEVELS=1  OMP_STACKSIZE=256M OMP_PROC_BIND=true  OMP_NUM_THREADS=16 \
            OMP_PLACES='{0:1},{4:1},{8:1},{12:1},{16:1},{20:1},{24:1},{28:1},{32:1},{36:1},{40:1},{44:1},{48:1},{52:1},{56:1},{60:1}' \
            $EXE_DIR/$stream_exe |grep -A 4 'Copy:' )
    elif echo $SKU | grep "hb120-32rs_v3"; then
        stream=$(OMP_SCHEDULE=static  OMP_DYNAMIC=false  OMP_MAX_ACTIVE_LEVELS=1  OMP_STACKSIZE=256M OMP_PROC_BIND=true  OMP_NUM_THREADS=16 \
            OMP_PLACES='{0:1},{2:1},{4:1},{6:1},{8:1},{10:1},{12:1},{14:1},{16:1},{18:1},{20:1},{22:1},{24:1},{26:1},{28:1},{30:1}' \
            $EXE_DIR/$stream_exe |grep -A 4 'Copy:' )
    elif echo $SKU | grep "hb120-16rs_v3"; then
        stream=$(OMP_SCHEDULE=static  OMP_DYNAMIC=false  OMP_MAX_ACTIVE_LEVELS=1  OMP_STACKSIZE=256M OMP_PROC_BIND=true  OMP_NUM_THREADS=16 \
            OMP_PLACES='{0:1},{1:1},{2:1},{3:1},{4:1},{5:1},{6:1},{7:1},{8:1},{9:1},{10:1},{11:1},{12:1},{13:1},{14:1},{15:1}' \
            $EXE_DIR/$stream_exe |grep -A 4 'Copy:' )
    elif echo $SKU | grep "hb120rs_v2"; then
        stream=$(OMP_SCHEDULE=static  OMP_DYNAMIC=false  OMP_MAX_ACTIVE_LEVELS=1  OMP_STACKSIZE=256M OMP_PROC_BIND=true  OMP_NUM_THREADS=32 \
            OMP_PLACES='{0:1},{3:1},{6:1},{10:1},{14:1},{18:1},{22:1},{26:1},{30:1},{33:1},{36:1},{40:1},{44:1},{48:1},{52:1},{56:1},{60:1},{63:1},{66:1},{70:1},{74:1},{78:1},{82:1},{86:1},{90:1},{93:1},{96:1},{100:1},{104:1},{108:1},{112:1},{116:1}' \
            $EXE_DIR/$stream_exe |grep -A 4 'Copy:')
    else
        die 1 -e "SKU: $SKU check not currently implemented"
        return 1
    fi
    values=(`echo $stream | awk -F 'Copy: ' '{print $2}' | awk '{print $1}'` `echo $stream | \
        awk -F 'Add: ' '{print  $2}' | awk '{print $1}'` `echo $stream | \
        awk -F 'Scale: ' '{print $2}' | awk '{print $1}'` `echo $stream | awk -F 'Triad: ' '{print $2}' | awk '{print $1}'`)
    result_labels=("Copy" "Add" "Scale" "Triad")
    length=${#values[@]}
    for ((i = 0; i < length; i++));
    do
        result=${values[$i]}
        dbg stream_${result_labels[$i]}: $result
        if (( $(echo "$result < $EXP_PERF" | bc -l) )); then
            die 1 -e "\t **Fail** Stream test failed on at least one function less than expeted value: $EXP_PERF. Stream Results: $stream"
            return 1
        fi
    done
    return 0

}
