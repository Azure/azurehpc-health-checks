#!/bin/bash

source /etc/nhc/scripts/azure_common.nhc

function ib_write(){
   
   # default env vars
   IB_WRITE_BW_EXE_PATH=$AZ_NHC_ROOT/bin/ib_write_bw_nongdr
   IB_WRITE_BW=`basename $IB_WRITE_BW_EXE_PATH`
   IB_WRITE_BW_DURATION=10
   HOSTNAME=`hostname`
   SLEEP_TIME=5

   device=$1
   MSG_SIZE=$2
   EXP_IB_BW=$3

   if ! numa_node=$(get_ib_numa_node "$device"); then
      die 1 "check_ib_bw_non_gdr: $IB_WRITE_BW, IB=$device, could not determine NUMA node. FaultCode: NHCNA"
      return 1
   fi
   if ! numa_core=$(get_numa_cpu "$numa_node"); then
      die 1 "check_ib_bw_non_gdr: $IB_WRITE_BW, IB=$device, could not determine NUMA core. faultCode: NHCNA"
      return 1
   fi

   IB_WRITE_BW_ARGS="-s $MSG_SIZE -D ${IB_WRITE_BW_DURATION} -x 0 -F --report_gbits --perform_warm_up -d $device -q 2"
   IB_WRITE_BW_OUT1=$( numactl --membind=$numa_node -C $numa_core  $IB_WRITE_BW_EXE_PATH $IB_WRITE_BW_ARGS  > /dev/null &)

   IB_WRITE_BW_OUT1_RC=$?
   if [[ $IB_WRITE_BW_OUT1_RC != 0 ]]; then
      log "$IB_WRITE_BW_OUT1"
      PORT=$(echo $IB_WRITE_BW_OUT1 | grep -oP '(?<=port\s)\w+')
      if [ -z "$PORT" ]; then
         die 1 "$FUNCNAME: $IB_WRITE_BW returned error code $IB_WRITE_BW_OUT1_RC, Port argument was not specified. FaultCode: NHCNA"
         return 1
      fi
      NETSTAT_OUT=$(netstat -lnp | grep $PORT)
      log "Running: netstat -lnp | grep $PORT:"
      log "$NETSTAT_OUT"
      die 1 "$FUNCNAME: $IB_WRITE_BW returned error code $IB_WRITE_BW_OUT1_RC. FaultCode: NHCNA"
      return 1
   fi
   sleep $SLEEP_TIME
   IB_WRITE_BW_OUT2=$( numactl --membind=$numa_node -C $(( numa_core + 1 )) $IB_WRITE_BW_EXE_PATH $IB_WRITE_BW_ARGS $HOSTNAME)

   IB_WRITE_BW_OUT2_RC=$?
   if [[ $IB_WRITE_BW_OUT2_RC != 0 ]]; then
      log "$IB_WRITE_BW_OUT2"
      PORT=$(echo $IB_WRITE_BW_OUT2 | grep -oP '(?<=port\s)\w+')
      if [ -z "$PORT" ]; then
         die 1 "$FUNCNAME: $IB_WRITE_BW returned error code $IB_WRITE_BW_OUT2_RC, Port argument was not specified. faultCode: NHCNA"
         return 1
      fi
      NETSTAT_OUT=$(netstat -lnp | grep $PORT)
      log "Running: netstat -lnp | grep $PORT:"
      log "$NETSTAT_OUT"
      die 1 "$FUNCNAME: $IB_WRITE_BW returned error code $IB_WRITE_BW_OUT2_RC. FaultCode: NHCNA"
      return 1
   fi
   IFS=$'\n'
   IB_WRITE_BW_OUT2_LINES=( $IB_WRITE_BW_OUT2 )
   IFS=$' \t\n'
 
   for ((i=0; i<${#IB_WRITE_BW_OUT2_LINES[*]}; i++))
   do
      # look for line beginning with the message size, this is where the result is
      if [[ "${IB_WRITE_BW_OUT2_LINES[$i]//$MSG_SIZE}" != "${IB_WRITE_BW_OUT2_LINES[$i]}" ]]; then
         LINE=( ${IB_WRITE_BW_OUT2_LINES[$i]} )
         ib_bandwidth=${LINE[3]}
         break
      fi
   done

   if (( $(echo "$ib_bandwidth < $EXP_IB_BW" | bc -l) )); then
         die 1 "check_ib_bw_non_gdr:  IB=$device, IB BW (expected > $EXP_IB_BW Gbps, but measured $ib_bandwidth Gbps). FaultCode: NHC2003"
         return 1
   fi
   dbg "ib_write_lb_${device}: $ib_bandwidth Gbps"
   pass 0 "$FUNCNAME: IB write bandwidth non gdr test passed"
   return 0
}

function check_ib_bw_non_gdr(){
   trap "background_cleanup" RETURN

   DEFAULT_MSG_SIZE=1048576

   EXP_IB_BW=$1
   MSG_SIZE=$2

   if [ -z "$MSG_SIZE" ]; then
      MSG_SIZE=$DEFAULT_MSG_SIZE
   fi

   # log pkeys
   print_pkeys $FUNCNAME

   #get devices
   devices=($(determine_IB_devices))

   for device in "${devices[@]}"; do
      ib_write $device $MSG_SIZE $EXP_IB_BW
   done

   pass 0 "$FUNCNAME: check passed"
   return 0
}
