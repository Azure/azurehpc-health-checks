#!/bin/bash

## This script tests GPU BW using NVBandwidth and compares the results to the expected BW.
# https://github.com/NVIDIA/nvbandwidth
# - host to device bandwidth 
# - device to host bandwidth 
# - device to device bandwidth

source /etc/nhc/scripts/azure_common.nhc

NVBW=$AZ_NHC_ROOT/bin/nvbandwidth
H2D="host_to_device_memcpy_ce"
D2H="device_to_host_memcpy_ce"
P2P="device_to_device_memcpy_read_ce"
# This array is used to store the results of the tests
declare -gA result_lines_array
declare -gA tests_map=( ["host_to_device_memcpy_ce"]="H2D" ["device_to_host_memcpy_ce"]="D2H" ["device_to_device_memcpy_read_ce"]="P2P" )

function cleanup {
    dbg "Unlocking graphics clock  before exit..."
    remove_clock_boost
}

#Catch error codes that may be thrown by the executable passed as the first
#input, and if an error code is tripped throw the second input as a message
catch_error() {
    declare -g output
    output=$($1)
    err_code=$?
    if [ $err_code -ne 0 ]; then
        die 1 "\t $2 $err_code" >&2
        return 1
    fi
    return 0
}

function check_nvlink_enabled(){
    # Check if NVLINK is enabled
    error_smi="check_gpu_bw: Failed to get NVLINK status with error code"
    nvlink_status="nvidia-smi nvlink --status"
    if ! catch_error "$nvlink_status" "$error_smi"; then
        echo false
        return 0
    fi
    if [ -z "$output" ]; then
        echo false
        return 1
    fi
    echo true
    return 0
}

function evaluate_nvBW_result(){
    # Evaluate the results of the NVBandwidth test
    EXP_GPU_PCIE_BW=$1
    EXP_P2P_BW=$2
    GPU_COUNT=$3
    
    for test in "${!result_lines_array[@]}"; do
        case $test in
            $H2D|$D2H)
                EXP_BW=$EXP_GPU_PCIE_BW 
                WARN_BW=$(echo "$EXP_BW * 1.05" | bc -l) # this warning value is 10% less than the expected value, we can consider it the failure threshold.
                ;;
            $P2P)
                EXP_BW=$EXP_P2P_BW
                WARN_BW=$(echo "$EXP_BW * 1.05" | bc -l) # this warning value is 10% less than the expected value, we can consider it the failure threshold.
                ;;
            *)
                die 1 "check_gpu_bw: failed to parse results. FaultCode: NHCNA"
                return 1
                ;;
        esac
        
        # shellcheck disable=SC2066
        for lines in "${result_lines_array[$test]}"; do
            IFS=$'\n'
            result_lines=( $lines )
            IFS=$' \t\n'

            peer_device=0
            for ((i=0; i<${#result_lines[*]}; i++))
            do
                BW_VALS=$(echo "${result_lines[$i]}" | awk '{for (i=2; i<=NF; i++) print $i}')
                gpu_device=0
                for gpubw in $BW_VALS; do
                    if [[ "$gpubw" == *"N/A"* ]]; then
                        ((gpu_device++))
                        continue
                    fi
                    if (( $(echo "$gpubw >= $WARN_BW" | bc -l) )); then
                        if [ "$test" = "$P2P" ]; then
                            dbg "${tests_map[$test]}_GPU_${gpu_device}_${peer_device}: $gpubw GB/s"
                        else
                            dbg "${tests_map[$test]}_GPU_${gpu_device}: $gpubw GB/s"
                        fi
                    elif (( $(echo "$gpubw >= $EXP_BW" | bc -l) )); then 
                        if [ "$test" = "$P2P" ]; then
                            warning 0 "check_gpu_bw: ${tests_map[$test]} test on GPU $gpu_device to GPU $peer_device has a bandwidth of $gpubw GB/s. Expected threshold $EXP_BW GB/s."
                        else
                            warning 0 "check_gpu_bw: ${tests_map[$test]} test on GPU $gpu_device has a bandwidth of $gpubw GB/s. Expected threshold $EXP_BW GB/s."
                        fi
                    else
                        if [ "$test" = "$P2P" ]; then
                            dbg "${tests_map[$test]}_GPU_${gpu_device}_${peer_device}: $gpubw GB/s"
                            die 1 "check_gpu_bw: ${tests_map[$test]} test on GPU $gpu_device to GPU $peer_device failed. Bandwidth $gpubw is less than $EXP_BW. FaultCode: NHC2020"
                        else
                            dbg "${tests_map[$test]}_GPU_${gpu_device}: $gpubw GB/s"
                            die 1 "check_gpu_bw: ${tests_map[$test]} test on GPU $gpu_device failed. Bandwidth $gpubw is less than $EXP_BW. FaultCode: NHC2020"
                        fi
                    fi
                    ((gpu_device++)) 
                done
                ((peer_device++))
            done
        done
    done

    return 0
}

function check_nvBW_gpu_bw()
{
    # Check GPU BW using NVBandwidth
    EXP_GPU_PCIE_BW=$1
    EXP_P2P_BW=$2

    # Lock graphics clocks to max freq to eliminate any time for the GPUs to boost.
    error_smi="check_gpu_bw: Failed raise GPU clocks with error code"
    if ! boost_gpu_clock > /dev/null 2>&1 ; then
        die 1 -e "check_gpu_bw: $error_smi. FaultCode: NHCNA"
        return 0
    fi

    # exit function to unlock clocks on exit 
    trap cleanup EXIT

    # Count the GPUs.
    error_smi="check_gpu_bw: Failed to get GPU Count with error code"
    gpu_list="timeout 3m nvidia-smi --query-gpu=name --format=csv,noheader"
    if ! catch_error "$gpu_list" "$error_smi"; then
        return 0
    fi
    ngpus=$(echo "$output" | wc -l)

    # Check if NVLINK is enabled and choose the right tests
    cmd_args="$H2D $D2H"
    if [[ "$(check_nvlink_enabled)" == true && -n "$EXP_P2P_BW" ]]; then
        cmd_args="$cmd_args $P2P"
    fi  
    cmd="$NVBW -t $cmd_args -i 10"

    error_nbw="check_gpu_bw: Failed to run NVBandwidth with error code"
    if ! catch_error "$cmd" "$error_nbw"; then
        return 0
    fi
    nvresult=$output
    IFS=$'\n'
    nvout=( $nvresult )
    IFS=$' \t\n'

    current_test=""

    # Extract the lines for each test
    for line in "${nvout[@]}"; do
        if [[ $line == Running* ]]; then
            if [ "$current_test" != "" ]; then
                extracted_lines="$(echo "${extracted_lines}" | awk 'NR>1')"
                result_lines_array["$current_test"]="$extracted_lines"
            fi
            # Set current test and remove extra spaces and dots
            current_test="${line#Running}" && current_test="${current_test//./}" && current_test="${current_test#"${current_test%%[![:space:]]*}"}"
            extracted_lines=""
        fi

        if [[ ! "$line" == *"memcpy"*  ]]; then
            extracted_lines+="$line"$'\n'
        fi
    done
    
    # Save the last test's extracted lines
    if [ "$current_test" != "" ]; then
        extracted_lines="$(echo "${extracted_lines}" | awk 'NR>1')"
        result_lines_array["$current_test"]="$extracted_lines"
    fi

    evaluate_nvBW_result $EXP_GPU_PCIE_BW $EXP_P2P_BW
    
    pass 0 "$FUNCNAME: GPU bandwidth Tests with NVBandwidth passed"
    return 0
}

function get_OAM_pairs(){
    # Get OAM pairs
    # return array where the index is the GPU id and the value is the OAM pair
    oam_check=$(rocm-smi --showserial | grep GPU)

    if [[ "$oam_check" == *"Not supported"* ]]; then
        # return an empty line
        echo ""
        return 0
    fi

    mapfile -t gsn < <(rocm-smi --showserial | grep GPU | awk '{print $5}')

    oam_pairs=()

    for ((i=0; i<${#gsn[@]}; i++)); do
        for ((j=0; j<${#gsn[@]}; j++))
        do
            if [[ $i -eq $j ]]; then
                continue
            else
                if [[ "${gsn[$j]}" == *"${gsn[$i]}"* ]]; then
                    oam_pairs+=($j)
                fi
            fi
        done
    done
    echo "${oam_pairs[@]}"
    # check if the array is empty
    if [ ${#oam_pairs[@]} -eq 0 ]; then
        echo ""
    fi
    return 0
}

function check_rocm_gpu_bw(){
    # Check GPU BW using ROCm Bandwidth Test
    exp_hd_bw=$1
    exp_dd_bw=$2
    exp_oam_bw=$3

    if [ ! -f /opt/rocm/bin/rocm-bandwidth-test ]; then
        die 1 "check_gpu_bw: rocm_bandwidth_test not found. Ensure ROCm is installed and sourced correctly. Check/rerun azurehpc-health-checks installation. FaultCode: NHCNA"
        return 1
    fi

    cmd="sudo /opt/rocm/bin/rocm-bandwidth-test -a"
    err_msg="check_gpu_bw: Failed to run rocm-bandwidth-test with error code"
    if ! catch_error "$cmd" "$error_nbw"; then
        return 1
    fi
    rocm_result=$output
    lines=()
    IFS=$'\n'
    lines=( $rocm_result)
    IFS=$' \t\n'

    # Get OAM pairs
    oam_pairs=$(get_OAM_pairs)
    if [ -z "$oam_pairs" ]; then
        oam_pairs=()
    fi
    read -a oam_pairs <<< "$oam_pairs"

    device_results=()
    declare -A devTypeIDmap # used to map a device to a type: CPU or GPU
    CPUNum=$(lscpu | grep "Socket(s)" | awk '{print $2}')
    store=false
    for line in "${lines[@]}"; do
        if [[ "$line" == *"Device: "* ]]; then
            id=$( echo $line | awk  -F ',' '{print $1}' | awk '{print $2}' )
            if [[ "$line" == *"GPU"* ]]; then
                devTypeIDmap[$id]="GPU"
            else
                devTypeIDmap[$id]="CPU"
            fi
        fi
        if [[ "$line" == *"Unidirectional copy"* ]]; then
            store=true
            continue
        fi
        if [ "$store" == true ]; then
            device_results+=("$line")
        fi
    done

    bad_results=()
    for ((i=1; i<${#device_results[*]}; i++))
    do  
        val_list=()
        values="${device_results[$i]}"
        IFS=$' ' read -ra values <<< "$values"
        id=${values[0]}

        for ((devid=0; devid<$(( ${#values[*]} -1 )); devid++)) 
        do
            val=${values[$(( devid + 1 ))]} #offset first val
            real_GPUID=$(( devid - CPUNum )) # offset by number of CPUs
            cur_real_GPUID=$(( id - CPUNum )) # offset by number of CPUs for GPU being evaluated
            dbg "ROCm Device id $id to Device id $devid: $val GB/s"
            if ( [[ "${devTypeIDmap[$id]}" == "${devTypeIDmap[$devid]}" ]] &&  [[ "${devTypeIDmap[$devid]}" == *"CPU"* ]] ); then
                continue
            elif [ "${devTypeIDmap[$id]}" != "${devTypeIDmap[$devid]}" ]   ; then
                if [[ "${devTypeIDmap[$id]}" == *"CPU"* ]]; then
                    # htd
                    if (( $(echo "$exp_hd_bw > $val" | bc -l) )); then
                        bad_results+=("CPU $id to GPU $real_GPUID: Less than expectd $exp_hd_bw GB/s, result: $val GB/s")
                    fi
                else
                    # dth
                    if (( $(echo "$exp_hd_bw > $val" | bc -l) )); then
                        bad_results+=("GPU $cur_real_GPUID to CPU $id: Less than expectd $exp_hd_bw GB/s, result: $val GB/s")
                    fi
                fi
                continue
            else
                # d2d
                if [ -z $oam_pairs ]; then
                    #No OAM pairs
                    if (( $(echo "$exp_dd_bw > $val" | bc -l) )); then
                        bad_results+=("GPU $cur_real_GPUID to GPU $real_GPUID: Less than expectd $exp_dd_bw GB/s, result: $val GB/s")
                    fi
                elif [ $((oam_pairs[$cur_real_GPUID])) -eq $(($real_GPUID)) ]; then
                    if (( $(echo "$exp_oam_bw > $val" | bc -l) )); then
                        bad_results+=("GPU $cur_real_GPUID to GPU $real_GPUID: Less than expectd $exp_oam_bw GB/s, result: $val GB/s")
                    fi
                else
                    # not an OAM pair
                    if (( $(echo "$exp_dd_bw > $val" | bc -l) )); then
                        bad_results+=("GPU $cur_real_GPUID to GPU $real_GPUID: Less than expectd $exp_dd_bw GB/s, result: $val GB/s")
                    fi
                fi
            fi
        done
    done    

    for bad_result in "${bad_results[@]}"; do
        die 1 "check_gpu_bw: $bad_result. FaultCode: NHC2020"
    done

    if [ ${#bad_results[@]} -gt 0 ]; then
        return 1
    fi

    return 0
}

function check_gpu_bw(){
    trap "background_cleanup" RETURN
    if lspci | grep -iq NVIDIA ; then
	    # Check GPU BW using NVBandwidth
        EXP_GPU_PCIE_BW=$1
        EXP_P2P_BW=$2
        if [[ -z "$EXP_GPU_PCIE_BW"  ]]; then
            die 1 -e "$FUNCNAME: Expected H2D/D2H bandwidth not set! FaultCode: NHCNA"
            return 0
        fi
        check_nvBW_gpu_bw $EXP_GPU_PCIE_BW $EXP_P2P_BW
    elif lspci | grep -iq AMD ; then
        # Check GPU BW using ROCm Bandwidth Test
        EXP_AMD_HD=$1
        EXP_AMD_DD=$2
        EXP_AMD_OAM=$3

        if [[ -z "$EXP_AMD_HD"  ]] || [[ -z "$EXP_AMD_DD"  ]]; then
            die 1 -e "$FUNCNAME: Expected HTD/P2P/OAM P2P bandwidth not set! NHCNA"
            return 0
        fi
        if [[ -z "$EXP_AMD_OAM"  ]]; then
            # set expected OAM BW to expected dtd BW if not set
            EXP_AMD_OAM=$EXP_AMD_DD
        fi

        check_rocm_gpu_bw $EXP_AMD_HD $EXP_AMD_DD $EXP_AMD_OAM
    else
        die 1 -e "$FUNCNAME: No GPUs found! FaultCode: NHC2009"
	fi

    pass 0 "$FUNCNAME: GPU Bandwidth Tests Passed"
    return 0
}
